/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/specs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get workflow specifications */
        get: operations["getWorkflowSpecs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of workflow */
        get: operations["getWorkflows"];
        put?: never;
        /** Create or update a workflow */
        post: operations["createWorkflows"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/{workflowId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a workflow by ID */
        get: operations["getWorkflowById"];
        put?: never;
        post?: never;
        /** Delete a workflow */
        delete: operations["deleteWorkflow"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/{workflowId}/abort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Abort a workflow instance
         * @description Aborts a workflow instance identified by the provided `workflowId`.
         *
         */
        delete: operations["abortWorkflow"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/{workflowId}/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute a workflow */
        post: operations["executeWorkflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/{workflowId}/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a workflow overview by ID */
        get: operations["getWorkflowOverviewById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/{workflowId}/parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get input parameters by steps */
        get: operations["getParametersByStep"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/{workflowId}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Workflow Progress */
        get: operations["getWrokflowProgress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get instances
         * @description Retrieve an array of instances
         */
        get: operations["getInstances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/instances/{instanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Workflow Instance by ID */
        get: operations["getInstanceById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/instances/{instanceId}/result": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get assessment results */
        get: operations["getAssessmentResults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/instances/statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get workflow status list
         * @description Retrieve an array of workflow statuses as string
         */
        get: operations["getWorkflowStatuses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/workflows/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of workflow overviews */
        get: operations["getWorkflowsOverview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ExecuteWorkflowRequestDTO: {
            inputData: {
                [key: string]: string | undefined;
            };
        };
        ExecuteWorkflowResponseDTO: {
            id?: string;
        };
        NodeInstanceDTO: {
            /**
             * @description Type name
             * @default NodeInstance
             */
            __typename: string;
            /** @description Definition ID */
            definitionId?: string;
            /**
             * Format: date-time
             * @description Date when the node was entered
             */
            enter?: string;
            /**
             * Format: date-time
             * @description Date when the node was exited (optional)
             */
            exit?: string;
            /** @description Node instance ID */
            id?: string;
            /** @description Node name */
            name?: string;
            /** @description Node ID */
            nodeId?: string;
            /** @description Node type */
            type?: string;
        };
        PaginationInfoDTO: {
            limit?: number;
            offset?: number;
            totalCount?: number;
        };
        ParameterDTO: {
            name: string;
            type: string;
        };
        ParametersByStepDTO: components["schemas"]["ParameterStepDTO"][];
        ParameterStepDTO: components["schemas"]["ParameterDTO"][];
        ProcessInstanceDTO: {
            category?: components["schemas"]["WorkflowCategoryDTO"];
            description?: string;
            duration?: string;
            id?: string;
            name?: string;
            nextWorkflowSuggestions?: components["schemas"]["WorkflowSuggestionsDTO"];
            /** Format: date-time */
            started?: string;
            status?: components["schemas"]["ProcessInstanceStatusDTO"];
            workflow?: string;
        };
        ProcessInstanceError: {
            /**
             * @description Type name
             * @default ProcessInstanceError
             */
            __typename: string;
            /** @description Error message (optional) */
            message?: string;
            /** @description Node definition ID */
            nodeDefinitionId?: string;
        };
        ProcessInstancesDTO: components["schemas"]["ProcessInstanceDTO"][];
        /**
         * @description Status of the workflow run
         * @enum {string}
         */
        ProcessInstanceStatusDTO: ProcessInstanceStatusDTO;
        /**
         * @description Category of the workflow
         * @enum {string}
         */
        WorkflowCategoryDTO: WorkflowCategoryDTO;
        WorkflowContentDTO: {
            /** @description JSON string */
            content?: string;
        };
        WorkflowDTO: {
            annotations?: string[];
            category: components["schemas"]["WorkflowCategoryDTO"];
            /** @description Description of the workflow */
            description?: string;
            /** @description Workflow unique identifier */
            id: string;
            /** @description Workflow name */
            name?: string;
            /** @description URI of the workflow definition */
            uri: string;
        };
        WorkflowListResultDTO: {
            items: components["schemas"]["WorkflowDTO"][];
            paginationInfo: components["schemas"]["PaginationInfoDTO"];
        };
        WorkflowOverviewDTO: {
            avgDurationMs?: number;
            description?: string;
            lastRunStatus?: string;
            lastTriggeredMs?: number;
            /** @description Workflow name */
            name?: string;
            type?: string;
            uri?: string;
            /** @description Workflow unique identifier */
            workflowId?: string;
        };
        WorkflowOverviewListResultDTO: {
            overviews?: components["schemas"]["WorkflowOverviewDTO"][];
            paginationInfo?: components["schemas"]["PaginationInfoDTO"];
        };
        WorkflowProgressDTO: components["schemas"]["NodeInstanceDTO"] & {
            error?: components["schemas"]["ProcessInstanceError"];
            status?: components["schemas"]["ProcessInstanceStatusDTO"];
        };
        WorkflowRunStatusDTO: {
            key?: string;
            value?: string;
        };
        WorkflowSpecFileDTO: {
            content?: components["schemas"]["WorkflowContentDTO"];
            path?: string;
        };
        WorkflowSuggestionDTO: {
            suggestion?: string;
            workflow?: string;
        };
        WorkflowSuggestionsDTO: {
            [key: string]: components["schemas"]["WorkflowSuggestionDTO"] | undefined;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getWorkflowSpecs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of workflow specifications */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowSpecFileDTO"][];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    getWorkflows: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowListResultDTO"];
                };
            };
        };
    };
    createWorkflows: {
        parameters: {
            query?: {
                /** @description URI parameter */
                uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    body?: string;
                    uri: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        workflowItem?: components["schemas"]["WorkflowDTO"];
                    };
                };
            };
            /** @description Error fetching workflow list */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    getWorkflowById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the workflow */
                workflowId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowDTO"];
                };
            };
            /** @description Error fetching workflow */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteWorkflow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workflow to delete */
                workflowId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful deletion */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    abortWorkflow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier of the workflow instance to abort. */
                workflowId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    executeWorkflow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workflow to execute */
                workflowId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExecuteWorkflowRequestDTO"];
            };
        };
        responses: {
            /** @description Successful execution */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExecuteWorkflowResponseDTO"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    getWorkflowOverviewById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the workflow */
                workflowId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowOverviewDTO"];
                };
            };
            /** @description Error fetching workflow overview */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    getParametersByStep: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the workflow */
                workflowId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful division of parameters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParametersByStepDTO"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    getWrokflowProgress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the workflow */
                workflowId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowProgressDTO"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    getInstances: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessInstancesDTO"];
                };
            };
            /** @description Error fetching instances */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    getInstanceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workflow instance */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessInstanceDTO"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    getAssessmentResults: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the assessment workflow */
                assessmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowSuggestionsDTO"];
                };
            };
        };
    };
    getWorkflowStatuses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunStatusDTO"][];
                };
            };
        };
    };
    getWorkflowsOverview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowOverviewListResultDTO"];
                };
            };
            /** @description Error fetching workflow overviews */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
}
export enum ProcessInstanceStatusDTO {
    // Running
    RUNNING = "Running",
    // Error
    ERROR = "Error",
    // Completed
    COMPLETED = "Completed",
    // Aborted
    ABORTED = "Aborted",
    // Suspended
    SUSPENDED = "Suspended"
}
export enum WorkflowCategoryDTO {
    // Assessment Workflow
    ASSESSMENT = "assessment",
    // Infrastructure Workflow
    INFRASTRUCTURE = "infrastructure"
}
